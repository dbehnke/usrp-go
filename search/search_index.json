{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"usrp-go docs","text":"<p>Welcome to the usrp-go project documentation. Use the navigation on the left to explore docs.</p> <p>This documentation is built with MkDocs Material and published to GitHub Pages.</p>"},{"location":"AUDIO_CONVERSION/","title":"Audio Conversion with FFmpeg","text":"<p>This document explains how to use FFmpeg to convert audio data between USRP packets and other formats like Opus/Ogg for streaming applications.</p>"},{"location":"AUDIO_CONVERSION/#overview","title":"Overview","text":"<p>The USRP protocol uses signed 16-bit little-endian PCM at 8kHz mono with 160 samples per packet (20ms frames). This is perfect for voice applications but you may want to convert to compressed formats for:</p> <ul> <li>Bandwidth efficiency: Opus/Ogg provides much better compression than raw PCM</li> <li>Internet streaming: Standard formats work with existing streaming infrastructure  </li> <li>Storage: Compressed formats reduce file sizes significantly</li> <li>Compatibility: Integration with WebRTC, SIP, or other VoIP systems</li> </ul>"},{"location":"AUDIO_CONVERSION/#key-features","title":"Key Features","text":"<p>\u2705 Real-time conversion between USRP and Opus/Ogg formats \u2705 Streaming support for non-continuous audio (PTT-based) \u2705 Bidirectional conversion (USRP \u2194 Opus/Ogg) \u2705 Frame-accurate processing with 20ms alignment \u2705 Thread-safe with concurrent processing \u2705 Error handling for network timeouts and format issues  </p>"},{"location":"AUDIO_CONVERSION/#requirements","title":"Requirements","text":"<ul> <li>FFmpeg with <code>libopus</code> support</li> <li>Go 1.19+ </li> </ul>"},{"location":"AUDIO_CONVERSION/#installing-ffmpeg-with-opus-support","title":"Installing FFmpeg with Opus Support","text":"<pre><code># macOS (Homebrew)\nbrew install ffmpeg\n\n# Ubuntu/Debian\nsudo apt update\nsudo apt install ffmpeg libopus-dev\n\n# CentOS/RHEL\nsudo yum install ffmpeg opus-devel\n\n# Windows\n# Download from https://ffmpeg.org/download.html\n# Make sure it includes libopus\n</code></pre> <p>Verify FFmpeg has Opus support:</p> <pre><code>ffmpeg -encoders | grep opus\n</code></pre> <p>Should show:</p> <pre><code> A..... libopus              libopus Opus\n</code></pre>"},{"location":"AUDIO_CONVERSION/#basic-usage","title":"Basic Usage","text":""},{"location":"AUDIO_CONVERSION/#simple-conversion-example","title":"Simple Conversion Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/dbehnke/usrp-go/pkg/audio\"\n    \"github.com/dbehnke/usrp-go/pkg/usrp\"\n)\n\nfunc main() {\n    // Create Opus converter\n    converter, err := audio.NewOpusConverter()\n    if err != nil {\n        panic(err)\n    }\n    defer converter.Close()\n\n    // Create USRP voice message\n    voiceMsg := &amp;usrp.VoiceMessage{\n        Header: usrp.NewHeader(usrp.USRP_TYPE_VOICE, 1234),\n    }\n\n    // Fill with your audio data (160 samples)\n    for i := range voiceMsg.AudioData {\n        voiceMsg.AudioData[i] = int16(i * 100) // Your audio here\n    }\n\n    // Convert USRP -&gt; Opus\n    opusData, err := converter.USRPToFormat(voiceMsg)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Converted to %d bytes of Opus\\n\", len(opusData))\n\n    // Convert back: Opus -&gt; USRP  \n    usrpMessages, err := converter.FormatToUSRP(opusData)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Converted back to %d USRP messages\\n\", len(usrpMessages))\n}\n</code></pre>"},{"location":"AUDIO_CONVERSION/#streaming-audio-bridge","title":"Streaming Audio Bridge","text":"<pre><code>package main\n\nimport (\n    \"github.com/dbehnke/usrp-go/pkg/audio\" \n    \"github.com/dbehnke/usrp-go/pkg/usrp\"\n)\n\nfunc main() {\n    // Create converter and bridge\n    converter, _ := audio.NewOpusConverter()\n    bridge := audio.NewAudioBridge(converter)\n    defer bridge.Stop()\n\n    bridge.Start()\n\n    // Stream USRP packets through bridge\n    for {\n        // Receive USRP packet from network...\n        voiceMsg := receiveUSRPPacket()\n\n        // Send to bridge for conversion\n        bridge.USRPIn &lt;- voiceMsg\n\n        // Get converted Opus data\n        select {\n        case opusData := &lt;-bridge.USRPToChan:\n            // Send Opus data over internet...\n            sendOpusData(opusData)\n        default:\n            // No data yet\n        }\n    }\n}\n</code></pre>"},{"location":"AUDIO_CONVERSION/#audio-formats-supported","title":"Audio Formats Supported","text":""},{"location":"AUDIO_CONVERSION/#usrp-format-input","title":"USRP Format (Input)","text":"<ul> <li>Format: Signed 16-bit little-endian PCM</li> <li>Sample Rate: 8000 Hz  </li> <li>Channels: 1 (mono)</li> <li>Frame Size: 160 samples (20ms)</li> <li>Bandwidth: ~128 kbps uncompressed</li> </ul>"},{"location":"AUDIO_CONVERSION/#opus-output","title":"Opus (Output)","text":"<ul> <li>Format: Opus compressed audio</li> <li>Sample Rate: 8000 Hz (matches USRP)</li> <li>Channels: 1 (mono)</li> <li>Bitrate: 64 kbps (configurable)</li> <li>Frame Size: 20ms (matches USRP perfectly)</li> <li>Compression: ~50% reduction in bandwidth</li> </ul>"},{"location":"AUDIO_CONVERSION/#oggopus-output","title":"Ogg/Opus (Output)","text":"<ul> <li>Format: Opus in Ogg container</li> <li>Same specs as Opus but with container overhead</li> <li>Better for file storage and streaming protocols</li> </ul>"},{"location":"AUDIO_CONVERSION/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"AUDIO_CONVERSION/#custom-converter-settings","title":"Custom Converter Settings","text":"<pre><code>config := &amp;audio.ConverterConfig{\n    InputFormat:  \"s16le\",    // PCM 16-bit little-endian\n    OutputFormat: \"opus\",     // Target format\n    InputRate:    8000,       // USRP sample rate\n    OutputRate:   8000,       // Keep same rate\n    Channels:     1,          // Mono\n    BitRate:      32,         // Lower bitrate (32 kbps)\n    FrameSize:    20 * time.Millisecond, // 20ms frames\n}\n\nconverter, err := audio.NewStreamingConverter(config)\n</code></pre>"},{"location":"AUDIO_CONVERSION/#error-handling-timeouts","title":"Error Handling &amp; Timeouts","text":"<pre><code>// The converter includes timeout handling for streaming data\nconverter, _ := audio.NewOpusConverter()\n\nvoiceMsg := &amp;usrp.VoiceMessage{ /* ... */ }\n\nopusData, err := converter.USRPToFormat(voiceMsg)\nif err != nil {\n    if strings.Contains(err.Error(), \"timeout\") {\n        // FFmpeg not ready or no data yet\n        // This is normal for streaming applications\n    } else {\n        // Real error - check FFmpeg installation\n        log.Printf(\"Conversion error: %v\", err)\n    }\n}\n</code></pre>"},{"location":"AUDIO_CONVERSION/#integration-patterns","title":"Integration Patterns","text":""},{"location":"AUDIO_CONVERSION/#1-allstarlink-bridge","title":"1. AllStarLink Bridge","text":"<p>Convert USRP from AllStarLink to Opus for internet transmission:</p> <pre><code>// Receive from AllStarLink (USRP)\nusrpConn, _ := net.ListenUDP(\"udp\", &amp;net.UDPAddr{Port: 12345})\n\n// Send to internet client (Opus)  \nopusConn, _ := net.DialUDP(\"udp\", nil, &amp;net.UDPAddr{\n    IP: net.ParseIP(\"remote.server.com\"), Port: 8000,\n})\n\nconverter, _ := audio.NewOpusConverter()\n\nfor {\n    buffer := make([]byte, 1024)\n    n, _ := usrpConn.Read(buffer)\n\n    voiceMsg := &amp;usrp.VoiceMessage{}\n    voiceMsg.Unmarshal(buffer[:n])\n\n    opusData, _ := converter.USRPToFormat(voiceMsg) \n    opusConn.Write(opusData)\n}\n</code></pre>"},{"location":"AUDIO_CONVERSION/#2-webrtc-integration","title":"2. WebRTC Integration","text":"<p>Stream amateur radio to web browsers:</p> <pre><code>// Convert USRP to Opus for WebRTC\nconverter, _ := audio.NewOpusConverter()\n\n// WebRTC expects Opus in specific format\nwebrtcConfig := &amp;audio.ConverterConfig{\n    OutputFormat: \"opus\",\n    BitRate:      32,  // Lower for web\n    FrameSize:    20 * time.Millisecond,\n}\n\nfor {\n    voiceMsg := getUSRPFromRadio()\n    opusData, _ := converter.USRPToFormat(voiceMsg)\n\n    // Send to WebRTC peer connection\n    sendToWebRTC(opusData)\n}\n</code></pre>"},{"location":"AUDIO_CONVERSION/#3-recording-playback","title":"3. Recording &amp; Playback","text":"<p>Record amateur radio transmissions:</p> <pre><code>// Record to Ogg file\nconverter, _ := audio.NewOggOpusConverter()\nfile, _ := os.Create(\"recording.ogg\")\n\nfor {\n    voiceMsg := getUSRPFromRadio()\n    if voiceMsg.Header.IsPTT() {\n        oggData, _ := converter.USRPToFormat(voiceMsg)\n        file.Write(oggData)\n    }\n}\n</code></pre>"},{"location":"AUDIO_CONVERSION/#performance-considerations","title":"Performance Considerations","text":""},{"location":"AUDIO_CONVERSION/#latency","title":"Latency","text":"<ul> <li>FFmpeg processing: ~5-15ms additional latency</li> <li>Network buffering: Adjust based on jitter requirements</li> <li>Frame alignment: 20ms frames minimize latency impact</li> </ul>"},{"location":"AUDIO_CONVERSION/#cpu-usage","title":"CPU Usage","text":"<ul> <li>Opus encoding: ~1-3% CPU per stream on modern hardware</li> <li>Memory: ~10MB per converter instance  </li> <li>Concurrent streams: Each converter runs separate FFmpeg processes</li> </ul>"},{"location":"AUDIO_CONVERSION/#bandwidth-savings","title":"Bandwidth Savings","text":"Format Bandwidth Compression USRP PCM 128 kbps None Opus 64k 64 kbps 50% Opus 32k 32 kbps 75% Opus 16k 16 kbps 87%"},{"location":"AUDIO_CONVERSION/#testing","title":"Testing","text":"<pre><code># Run conversion tests\nmake run-audio-test\n\n# Test server/client bridge  \n# Terminal 1:\nmake run-audio-server\n\n# Terminal 2:  \nmake run-audio-client\n\n# Unit tests\ngo test ./pkg/audio/ -v\n\n# Benchmarks\ngo test -bench=. ./pkg/audio/\n</code></pre>"},{"location":"AUDIO_CONVERSION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"AUDIO_CONVERSION/#ffmpeg-not-found","title":"\"FFmpeg not found\"","text":"<pre><code># Check FFmpeg installation\nwhich ffmpeg\nffmpeg -version\n</code></pre>"},{"location":"AUDIO_CONVERSION/#libopus-not-supported","title":"\"libopus not supported\"","text":"<pre><code># Check available encoders\nffmpeg -encoders | grep opus\n\n# Reinstall with Opus support\nbrew reinstall ffmpeg  # macOS\n</code></pre>"},{"location":"AUDIO_CONVERSION/#read-timeout-errors","title":"\"Read timeout\" errors","text":"<ul> <li>Normal for streaming applications</li> <li>Indicates FFmpeg needs more data or isn't ready</li> <li>Not an error - just retry the operation</li> </ul>"},{"location":"AUDIO_CONVERSION/#high-cpu-usage","title":"High CPU usage","text":"<ul> <li>Reduce bitrate: 64k \u2192 32k \u2192 16k</li> <li>Use fewer concurrent converters</li> <li>Consider hardware acceleration if available</li> </ul>"},{"location":"AUDIO_CONVERSION/#poor-audio-quality","title":"Poor audio quality","text":"<ul> <li>Increase bitrate: 32k \u2192 64k</li> <li>Check input audio quality (USRP source)</li> <li>Verify sample rate matches (8000 Hz)</li> </ul>"},{"location":"AUDIO_CONVERSION/#example-applications","title":"Example Applications","text":"<p>The repository includes complete examples:</p> <ul> <li><code>cmd/examples/audio_bridge.go</code>: Full bidirectional converter</li> <li><code>pkg/audio/converter_test.go</code>: Unit tests and benchmarks  </li> <li>Server/client demos: Real-time streaming over UDP</li> </ul>"},{"location":"AUDIO_CONVERSION/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements:</p> <ul> <li>Hardware acceleration: GPU-based encoding/decoding</li> <li>Multiple formats: MP3, AAC, G.722 support</li> <li>Adaptive bitrate: Dynamic quality based on network conditions</li> <li>WebSocket streaming: Direct browser integration</li> <li>SIP integration: Direct VoIP connectivity</li> </ul>"},{"location":"AUDIO_CONVERSION/#amateur-radio-applications","title":"Amateur Radio Applications","text":"<p>Perfect for:</p> <ul> <li>Internet linking: Connect distant repeaters over internet</li> <li>Emergency communications: Backup paths using internet infrastructure  </li> <li>Digital modes: Bridge analog FM to digital systems</li> <li>Recording systems: Efficient storage of transmissions</li> <li>Web monitoring: Listen to repeaters via web browser</li> <li>Mobile apps: Stream amateur radio to smartphones</li> </ul> <p>This audio conversion system enables amateur radio systems to leverage modern internet infrastructure while maintaining compatibility with traditional USRP-based networks.</p> <p>73! \ud83d\udcfb Happy experimenting with software-defined radio!</p>"},{"location":"DISCORD_BRIDGE/","title":"Discord Bridge for Amateur Radio","text":"<p>This document explains how to use the Discord bridge to connect amateur radio USRP systems with Discord voice channels, enabling real-time voice communication between amateur radio operators and Discord users.</p>"},{"location":"DISCORD_BRIDGE/#overview","title":"Overview","text":"<p>The Discord bridge provides bidirectional audio conversion between: - Amateur Radio: USRP protocol packets (8kHz mono PCM) - Discord Voice: Discord voice channels (48kHz stereo Opus)</p> <p>This enables amateur radio repeaters and networks to extend their reach through Discord voice channels while maintaining proper amateur radio protocols and identification.</p>"},{"location":"DISCORD_BRIDGE/#key-features","title":"Key Features","text":"<p>\u2705 Real-time Voice Bridge: Live audio between amateur radio and Discord \u2705 Automatic Audio Conversion: 8kHz \u2194 48kHz resampling with format conversion \u2705 PTT Integration: Push-to-talk control from amateur radio to Discord \u2705 Voice Activity Detection: Automatic transmission triggering from Discord \u2705 Amateur Radio Compliant: Proper USRP packet formatting and callsign handling \u2705 High Performance: Low-latency audio processing with efficient buffering  </p>"},{"location":"DISCORD_BRIDGE/#requirements","title":"Requirements","text":""},{"location":"DISCORD_BRIDGE/#software-requirements","title":"Software Requirements","text":"<ul> <li>Go 1.19+ for building the bridge</li> <li>FFmpeg with libopus for audio conversion</li> <li>Discord Bot with voice channel permissions</li> </ul>"},{"location":"DISCORD_BRIDGE/#amateur-radio-requirements","title":"Amateur Radio Requirements","text":"<ul> <li>Amateur radio license for USRP operation</li> <li>USRP-compatible system (AllStarLink, app_rpt, etc.)</li> <li>Valid amateur radio callsign for identification</li> </ul>"},{"location":"DISCORD_BRIDGE/#discord-requirements","title":"Discord Requirements","text":"<ul> <li>Discord Server with voice channels</li> <li>Bot Token with voice permissions</li> <li>Voice Channel Access for the bot</li> </ul>"},{"location":"DISCORD_BRIDGE/#setup","title":"Setup","text":""},{"location":"DISCORD_BRIDGE/#1-create-discord-bot","title":"1. Create Discord Bot","text":"<ol> <li>Go to Discord Developer Portal</li> <li>Create a new application</li> <li>Go to \"Bot\" section and create a bot</li> <li>Copy the bot token (keep it secret!)</li> <li>Enable the following permissions:</li> <li><code>Connect</code> - Join voice channels</li> <li><code>Speak</code> - Send audio to voice channels</li> <li><code>Use Voice Activity</code> - Voice activity detection</li> </ol>"},{"location":"DISCORD_BRIDGE/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Install FFmpeg with Opus support\n# macOS\nbrew install ffmpeg\n\n# Ubuntu/Debian\nsudo apt install ffmpeg libopus-dev\n\n# Verify Opus support\nffmpeg -encoders | grep opus\n</code></pre>"},{"location":"DISCORD_BRIDGE/#3-environment-setup","title":"3. Environment Setup","text":"<pre><code># Required: Discord bot token\nexport DISCORD_TOKEN=\"your_bot_token_here\"\n\n# Optional: Specific Discord server and channel\nexport DISCORD_GUILD=\"your_guild_id\"\nexport DISCORD_CHANNEL=\"your_voice_channel_id\"\n\n# Required for amateur radio: Your callsign\nexport AMATEUR_CALLSIGN=\"N0CALL\"  # Replace with your callsign\n</code></pre>"},{"location":"DISCORD_BRIDGE/#usage","title":"Usage","text":""},{"location":"DISCORD_BRIDGE/#basic-bridge-operation","title":"Basic Bridge Operation","text":"<pre><code># Test Discord bot connection\nmake run-discord-test\n\n# Run the full bridge\nmake run-discord-bridge\n</code></pre>"},{"location":"DISCORD_BRIDGE/#manual-commands","title":"Manual Commands","text":"<pre><code># Test Discord bot (verify token and permissions)\ngo run cmd/discord-bridge/main.go test\n\n# Run USRP-Discord bridge\ngo run cmd/discord-bridge/main.go bridge\n\n# Run USRP test server (for testing without real amateur radio)\ngo run cmd/discord-bridge/main.go server\n</code></pre>"},{"location":"DISCORD_BRIDGE/#architecture","title":"Architecture","text":"<pre><code>Amateur Radio \u2190\u2192 USRP Packets \u2190\u2192 Audio Bridge \u2190\u2192 Discord Bot \u2190\u2192 Discord Voice\n</code></pre>"},{"location":"DISCORD_BRIDGE/#data-flow","title":"Data Flow","text":"<p>Amateur Radio \u2192 Discord: 1. Amateur radio system sends USRP voice packets (8kHz mono PCM) 2. Bridge receives packets via UDP 3. Audio converted from 8kHz mono to 48kHz stereo 4. Discord bot sends audio to voice channel</p> <p>Discord \u2192 Amateur Radio: 1. Discord bot receives voice from users 2. Voice activity detection triggers transmission 3. Audio resampled from 48kHz stereo to 8kHz mono 4. Bridge creates USRP packets with proper amateur radio formatting 5. Packets sent to amateur radio system via UDP</p>"},{"location":"DISCORD_BRIDGE/#configuration","title":"Configuration","text":""},{"location":"DISCORD_BRIDGE/#bridge-configuration","title":"Bridge Configuration","text":"<pre><code>config := discord.DefaultBridgeConfig()\nconfig.DiscordToken = \"your_token\"\nconfig.DiscordGuild = \"guild_id\"\nconfig.DiscordChannel = \"channel_id\"\nconfig.CallSign = \"N0CALL\"\nconfig.VoiceThreshold = 1000    // Voice activation threshold\nconfig.PTTTimeout = 2 * time.Second\n</code></pre>"},{"location":"DISCORD_BRIDGE/#audio-settings","title":"Audio Settings","text":"Parameter USRP/Amateur Radio Discord Sample Rate 8000 Hz 48000 Hz Channels 1 (mono) 2 (stereo) Format 16-bit PCM Opus compressed Frame Size 20ms (160 samples) 20ms (960 samples)"},{"location":"DISCORD_BRIDGE/#network-configuration","title":"Network Configuration","text":""},{"location":"DISCORD_BRIDGE/#default-ports","title":"Default Ports","text":"<ul> <li>USRP Input: UDP port 12345 (configurable)</li> <li>Amateur Radio Output: UDP (configured in your amateur radio system)</li> </ul>"},{"location":"DISCORD_BRIDGE/#firewall-considerations","title":"Firewall Considerations","text":"<p>Ensure these ports are accessible: - UDP ports for USRP communication - HTTPS (443) for Discord API - WebSocket connections for Discord voice</p>"},{"location":"DISCORD_BRIDGE/#discord-bot-commands","title":"Discord Bot Commands","text":"<p>Once the bot is running in a Discord server, users can interact with it:</p> <pre><code>!join      - Bot joins the user's current voice channel\n!leave     - Bot leaves the voice channel  \n!status    - Shows connection status\n</code></pre>"},{"location":"DISCORD_BRIDGE/#amateur-radio-integration","title":"Amateur Radio Integration","text":""},{"location":"DISCORD_BRIDGE/#allstarlink-integration","title":"AllStarLink Integration","text":"<pre><code># In your AllStarLink node configuration:\n# Send USRP packets to bridge\nusrp_node=1999,127.0.0.1:12345,NONE\n\n# Receive USRP packets from bridge  \n# Configure your node to listen on the bridge's output port\n</code></pre>"},{"location":"DISCORD_BRIDGE/#manual-usrp-packet-testing","title":"Manual USRP Packet Testing","text":"<pre><code># Generate test USRP packets\nmake run-discord-server\n\n# This creates realistic amateur radio voice patterns for testing\n</code></pre>"},{"location":"DISCORD_BRIDGE/#legal-and-operational-considerations","title":"Legal and Operational Considerations","text":""},{"location":"DISCORD_BRIDGE/#amateur-radio-compliance","title":"Amateur Radio Compliance","text":"<p>\u26a0\ufe0f Important: This bridge is for amateur radio use only</p> <ul> <li>Valid License Required: You must hold a valid amateur radio license</li> <li>Proper Identification: All transmissions must include proper station identification</li> <li>Band Plan Compliance: Use only authorized amateur radio frequencies</li> <li>Third Party Traffic: Follow your country's third-party traffic regulations</li> </ul>"},{"location":"DISCORD_BRIDGE/#discord-terms-of-service","title":"Discord Terms of Service","text":"<ul> <li>Ensure Discord use complies with their Terms of Service</li> <li>Consider Discord's community guidelines for voice channels</li> <li>Be respectful of Discord users who may not be familiar with amateur radio procedures</li> </ul>"},{"location":"DISCORD_BRIDGE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DISCORD_BRIDGE/#discord-connection-issues","title":"Discord Connection Issues","text":"<pre><code># Test bot token\nmake run-discord-test\n\n# Check bot permissions in Discord server\n# Ensure bot has \"Connect\" and \"Speak\" permissions in voice channels\n</code></pre>"},{"location":"DISCORD_BRIDGE/#audio-quality-issues","title":"Audio Quality Issues","text":"<pre><code># Check FFmpeg installation\nffmpeg -version\nffmpeg -encoders | grep opus\n\n# Test audio conversion separately\nmake run-audio-test\n</code></pre>"},{"location":"DISCORD_BRIDGE/#network-issues","title":"Network Issues","text":"<pre><code># Test USRP packet reception\nsudo netstat -ulnp | grep :12345\n\n# Check firewall settings\n# Ensure UDP ports are not blocked\n</code></pre>"},{"location":"DISCORD_BRIDGE/#common-error-messages","title":"Common Error Messages","text":"<p>\"Discord token is required\" - Set the DISCORD_TOKEN environment variable - Verify the token is correct</p> <p>\"FFmpeg not available\" - Install FFmpeg with Opus support - Check PATH includes ffmpeg binary</p> <p>\"Voice connection not ready\" - Ensure bot has voice channel permissions - Check if the voice channel exists and is accessible</p>"},{"location":"DISCORD_BRIDGE/#performance-considerations","title":"Performance Considerations","text":""},{"location":"DISCORD_BRIDGE/#latency","title":"Latency","text":"<ul> <li>Typical latency: 50-200ms end-to-end</li> <li>Discord voice: ~40-80ms</li> <li>Audio processing: ~10-30ms</li> <li>Network: Variable based on connection</li> </ul>"},{"location":"DISCORD_BRIDGE/#cpu-usage","title":"CPU Usage","text":"<ul> <li>Bridge process: ~5-10% on modern hardware</li> <li>FFmpeg conversion: ~2-5% per active stream</li> <li>Discord bot: ~1-3%</li> </ul>"},{"location":"DISCORD_BRIDGE/#memory-usage","title":"Memory Usage","text":"<ul> <li>Total footprint: ~50-100MB</li> <li>Audio buffers: ~10MB</li> <li>Discord connection: ~20-40MB</li> </ul>"},{"location":"DISCORD_BRIDGE/#example-scenarios","title":"Example Scenarios","text":""},{"location":"DISCORD_BRIDGE/#1-repeater-extension","title":"1. Repeater Extension","text":"<p>Connect a local amateur radio repeater to Discord:</p> <pre><code># Amateur Radio Repeater \u2190\u2192 USRP Bridge \u2190\u2192 Discord Voice Channel\nexport AMATEUR_CALLSIGN=\"W1AW\"\nexport DISCORD_GUILD=\"your_club_server\"  \nexport DISCORD_CHANNEL=\"repeater_link\"\n\nmake run-discord-bridge\n</code></pre>"},{"location":"DISCORD_BRIDGE/#2-net-control-station","title":"2. Net Control Station","text":"<p>Use Discord for net control and amateur radio for participants:</p> <pre><code># Net Control (Discord) \u2190\u2192 Bridge \u2190\u2192 Amateur Radio Net\nexport AMATEUR_CALLSIGN=\"KC1NCS\"\nmake run-discord-bridge\n</code></pre>"},{"location":"DISCORD_BRIDGE/#3-emergency-communications","title":"3. Emergency Communications","text":"<p>Backup communications during emergencies:</p> <pre><code># Emergency Responders (Discord) \u2190\u2192 Bridge \u2190\u2192 Amateur Radio Emergency Net\nexport AMATEUR_CALLSIGN=\"EM1RGY\"\nmake run-discord-bridge\n</code></pre>"},{"location":"DISCORD_BRIDGE/#development","title":"Development","text":""},{"location":"DISCORD_BRIDGE/#testing-the-bridge","title":"Testing the Bridge","text":"<pre><code># Run complete test suite\ngo test ./pkg/discord/ -v\n\n# Test with real Discord connection\nmake run-discord-test\n\n# Test with simulated amateur radio traffic\nmake run-discord-server\n</code></pre>"},{"location":"DISCORD_BRIDGE/#extending-functionality","title":"Extending Functionality","text":"<p>The bridge is designed to be extensible:</p> <ul> <li>Custom audio processing: Modify resampling algorithms</li> <li>Additional protocols: Add support for other amateur radio protocols</li> <li>Enhanced PTT control: Implement hardware PTT interfaces</li> <li>Logging and monitoring: Add comprehensive logging for amateur radio compliance</li> </ul>"},{"location":"DISCORD_BRIDGE/#contributing","title":"Contributing","text":"<p>This is amateur radio software - contributions welcome!</p> <ol> <li>Ensure changes maintain amateur radio compliance</li> <li>Test with real amateur radio systems when possible</li> <li>Document any changes that affect legal compliance</li> <li>Follow Go best practices and include tests</li> </ol>"},{"location":"DISCORD_BRIDGE/#license","title":"License","text":"<p>MIT License - See LICENSE file for details.</p> <p>This software is provided for amateur radio experimentation under FCC Part 97 regulations and similar international amateur radio regulations.</p> <p>73, Good DX! \ud83d\udcfb\ud83c\udfae</p> <p>\"Bridging the gap between amateur radio and modern communications\"</p>"},{"location":"DISCORD_BRIDGE/#references","title":"References","text":"<ul> <li>FCC Part 97 - Amateur Radio Service</li> <li>Discord Developer Documentation</li> <li>AllStarLink Documentation</li> <li>USRP Protocol Specification</li> </ul>"},{"location":"REQUIREMENTS/","title":"\ud83d\udccb USRP Audio Router Hub - System Requirements","text":"<p>Complete system requirements and setup instructions for developing and running the USRP Audio Router Hub platform.</p>"},{"location":"REQUIREMENTS/#operating-system-support","title":"\ud83d\udda5\ufe0f Operating System Support","text":"OS Status Notes macOS \u2705 Recommended Best development experience with Colima Linux \u2705 Fully Supported Native Docker support Windows \u2705 Supported WSL2 recommended for best experience"},{"location":"REQUIREMENTS/#macos-setup-recommended-colima","title":"\ud83c\udf4e macOS Setup (Recommended: Colima)","text":""},{"location":"REQUIREMENTS/#why-colima-over-docker-desktop","title":"Why Colima over Docker Desktop?","text":"<ul> <li>\ud83c\udd93 Free and Open Source: No licensing restrictions</li> <li>\u26a1 Lightweight: Lower resource usage than Docker Desktop</li> <li>\ud83d\udd27 Developer Friendly: Better integration with development tools</li> <li>\ud83d\ude80 Fast: Optimized performance for macOS</li> <li>\ud83d\udcbe Disk Efficient: More efficient disk usage</li> </ul>"},{"location":"REQUIREMENTS/#macos-prerequisites","title":"macOS Prerequisites","text":"<pre><code># Install Homebrew (if not already installed)\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install required tools\nbrew install git go colima docker kubectl tilt just\n</code></pre>"},{"location":"REQUIREMENTS/#colima-setup-for-usrp-development","title":"Colima Setup for USRP Development","text":"<pre><code># Start Colima with optimized settings for our audio platform\ncolima start --cpu 4 --memory 8 --disk 60 --kubernetes\n\n# Verify installation\ndocker version\nkubectl cluster-info\ncolima status\n</code></pre> <p>Recommended Colima Configuration:</p> <pre><code># ~/.colima/default/colima.yaml (auto-created after first start)\n# Optimized for USRP Audio Router Hub development\n\ncpu: 4                    # 4 CPU cores for multi-service testing\nmemory: 8                 # 8GB RAM for all services + monitoring\ndisk: 60                  # 60GB disk for images and data\n\n# Kubernetes enabled for Tilt development\nkubernetes:\n  enabled: true\n  version: v1.28.4\n\n# Port forwarding for development\nnetwork:\n  address: true           # Enable VM IP access\n\n# Volume mounts for development\nmounts:\n  - location: ~/development\n    writable: true\n</code></pre>"},{"location":"REQUIREMENTS/#startingstopping-colima","title":"Starting/Stopping Colima","text":"<pre><code># Start Colima (do this before development)\ncolima start\n\n# Stop Colima (when done for the day)\ncolima stop\n\n# Restart Colima (if issues arise)\ncolima restart\n\n# Check status\ncolima status\n</code></pre>"},{"location":"REQUIREMENTS/#macos-development-workflow","title":"macOS Development Workflow","text":"<pre><code># 1. Start Colima\ncolima start\n\n# 2. Start USRP development environment\ncd /path/to/usrp-go\nmake tilt-up\n\n# 3. Open Tilt dashboard\nmake tilt-dashboard\n\n# 4. Develop with live reload!\n# Edit code \u2192 Tilt rebuilds \u2192 Services restart automatically\n\n# 5. When done, stop services and Colima\nmake tilt-down\ncolima stop\n</code></pre>"},{"location":"REQUIREMENTS/#linux-setup","title":"\ud83d\udc27 Linux Setup","text":""},{"location":"REQUIREMENTS/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\nsudo usermod -aG docker $USER\n\n# Install kubectl\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n\n# Install kind (for local Kubernetes)\ngo install sigs.k8s.io/kind@latest\n\n# Install Tilt\ncurl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash\n\n# Start kind cluster\nkind create cluster --name usrp-dev\n</code></pre>"},{"location":"REQUIREMENTS/#red-hatcentosfedora","title":"Red Hat/CentOS/Fedora","text":"<pre><code># Install Docker\nsudo dnf install -y docker\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# Install kubectl, kind, and tilt (same as Ubuntu)\n# Follow Ubuntu instructions above\n</code></pre>"},{"location":"REQUIREMENTS/#windows-setup","title":"\ud83e\ude9f Windows Setup","text":""},{"location":"REQUIREMENTS/#recommended-wsl2-docker","title":"Recommended: WSL2 + Docker","text":"<pre><code># Install WSL2\nwsl --install\n\n# Inside WSL2 Ubuntu, follow Linux setup instructions\n# Then access from Windows with excellent performance\n</code></pre>"},{"location":"REQUIREMENTS/#alternative-docker-desktop","title":"Alternative: Docker Desktop","text":"<pre><code># Install Docker Desktop for Windows\n# Enable Kubernetes in Docker Desktop settings\n# Install Tilt for Windows\n</code></pre>"},{"location":"REQUIREMENTS/#development-tools","title":"\ud83d\udd27 Development Tools","text":""},{"location":"REQUIREMENTS/#required-tools","title":"Required Tools","text":"Tool Version Purpose Go 1.25+ Core development language Docker 24.0+ Container runtime kubectl 1.28+ Kubernetes management Tilt 0.33+ Development environment orchestration just 1.15+ Modern command runner (replaces make)"},{"location":"REQUIREMENTS/#optional-but-recommended","title":"Optional but Recommended","text":"Tool Purpose FFmpeg Audio format conversion testing tcpdump Network packet analysis netcat Network connectivity testing jq JSON processing for API responses curl HTTP API testing"},{"location":"REQUIREMENTS/#installation-verification","title":"Installation Verification","text":"<pre><code># Verify all tools are properly installed\ngo version          # Should show Go 1.25+\ndocker version      # Should show Docker client/server\nkubectl version     # Should show client/server versions  \ntilt version        # Should show Tilt version\n</code></pre>"},{"location":"REQUIREMENTS/#amateur-radio-specific-requirements","title":"\ud83d\udce1 Amateur Radio Specific Requirements","text":""},{"location":"REQUIREMENTS/#audio-development","title":"Audio Development","text":"<p>For audio format conversion and analysis:</p> <pre><code># macOS\nbrew install ffmpeg sox\n\n# Ubuntu/Debian  \nsudo apt install ffmpeg sox\n\n# Red Hat/CentOS/Fedora\nsudo dnf install ffmpeg sox\n</code></pre>"},{"location":"REQUIREMENTS/#network-testing-tools","title":"Network Testing Tools","text":"<p>For amateur radio protocol testing:</p> <pre><code># macOS\nbrew install tcpdump netcat wireshark\n\n# Linux\nsudo apt install tcpdump netcat wireshark  # Ubuntu/Debian\nsudo dnf install tcpdump netcat wireshark  # Red Hat/CentOS/Fedora\n</code></pre>"},{"location":"REQUIREMENTS/#protocol-analysis","title":"Protocol Analysis","text":"<p>For USRP packet inspection:</p> <pre><code># Wireshark with custom dissectors (optional)\n# Useful for detailed USRP packet analysis\n</code></pre>"},{"location":"REQUIREMENTS/#quick-start-verification","title":"\ud83d\ude80 Quick Start Verification","text":""},{"location":"REQUIREMENTS/#system-health-check","title":"System Health Check","text":"<pre><code># Clone the repository\ngit clone https://github.com/dbehnke/usrp-go.git\ncd usrp-go\n\n# Verify Go build works\ngo build ./cmd/audio-router/\n\n# Verify Docker works\ndocker run hello-world\n\n# Verify Kubernetes works (Colima/kind/Docker Desktop)\nkubectl cluster-info\n\n# Verify Tilt works\ntilt version\n</code></pre>"},{"location":"REQUIREMENTS/#run-basic-tests","title":"Run Basic Tests","text":"<pre><code># Run unit tests\njust test\n\n# Test basic functionality\njust run-example\n\n# Test audio router config generation\njust router-config\n\n# Start development environment (requires Kubernetes)\njust dev\n</code></pre>"},{"location":"REQUIREMENTS/#performance-recommendations","title":"\u26a1 Performance Recommendations","text":""},{"location":"REQUIREMENTS/#macos-with-colima","title":"macOS with Colima","text":"<pre><code># Optimal Colima settings for USRP development\ncolima start \\\n  --cpu 4 \\\n  --memory 8 \\\n  --disk 60 \\\n  --kubernetes \\\n  --network-address\n</code></pre>"},{"location":"REQUIREMENTS/#resource-requirements-by-use-case","title":"Resource Requirements by Use Case","text":""},{"location":"REQUIREMENTS/#minimum-basic-development","title":"Minimum (Basic Development)","text":"<ul> <li>CPU: 2 cores</li> <li>RAM: 4GB</li> <li>Disk: 20GB</li> <li>Services: Audio Router + 1 mock service</li> </ul>"},{"location":"REQUIREMENTS/#recommended-full-development","title":"Recommended (Full Development)","text":"<ul> <li>CPU: 4 cores</li> <li>RAM: 8GB</li> <li>Disk: 60GB</li> <li>Services: Audio Router + All mock services + Monitoring</li> </ul>"},{"location":"REQUIREMENTS/#optimal-heavy-development","title":"Optimal (Heavy Development)","text":"<ul> <li>CPU: 8 cores</li> <li>RAM: 16GB</li> <li>Disk: 100GB</li> <li>Services: Multiple router instances + Load testing</li> </ul>"},{"location":"REQUIREMENTS/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"REQUIREMENTS/#common-macos-issues","title":"Common macOS Issues","text":""},{"location":"REQUIREMENTS/#colima-wont-start","title":"Colima Won't Start","text":"<pre><code># Check if Docker Desktop is running (conflicts with Colima)\ndocker context ls\n# Should show \"colima\" as current context\n\n# If Docker Desktop is active:\ndocker context use colima\n\n# Reset Colima if needed\ncolima delete\ncolima start --cpu 4 --memory 8 --kubernetes\n</code></pre>"},{"location":"REQUIREMENTS/#kubernetes-not-working","title":"Kubernetes Not Working","text":"<pre><code># Verify Kubernetes is enabled in Colima\ncolima status\n\n# If not enabled:\ncolima stop\ncolima start --kubernetes\n\n# Verify kubectl context\nkubectl config current-context  # Should show \"colima\"\n</code></pre>"},{"location":"REQUIREMENTS/#port-forwarding-issues","title":"Port Forwarding Issues","text":"<pre><code># Check if ports are already in use\nlsof -i :9090\nlsof -i :10350\n\n# Kill conflicting processes if needed\nsudo lsof -ti :9090 | xargs kill -9\n</code></pre>"},{"location":"REQUIREMENTS/#common-linux-issues","title":"Common Linux Issues","text":""},{"location":"REQUIREMENTS/#docker-permission-denied","title":"Docker Permission Denied","text":"<pre><code># Ensure user is in docker group\nsudo usermod -aG docker $USER\n# Log out and log back in\n\n# Or use sudo temporarily\nsudo docker version\n</code></pre>"},{"location":"REQUIREMENTS/#kind-cluster-issues","title":"Kind Cluster Issues","text":"<pre><code># Delete and recreate kind cluster\nkind delete cluster --name usrp-dev\nkind create cluster --name usrp-dev\n\n# Verify cluster is running\nkubectl cluster-info --context kind-usrp-dev\n</code></pre>"},{"location":"REQUIREMENTS/#getting-help","title":"Getting Help","text":""},{"location":"REQUIREMENTS/#check-system-status","title":"Check System Status","text":"<pre><code># Comprehensive system check\n./scripts/system-check.sh  # (if created)\n\n# Or manual checks:\ncolima status              # macOS\ndocker version\nkubectl cluster-info  \ntilt doctor               # Diagnose Tilt issues\n</code></pre>"},{"location":"REQUIREMENTS/#useful-debug-commands","title":"Useful Debug Commands","text":"<pre><code># Docker debugging\ndocker system info\ndocker system df\n\n# Kubernetes debugging\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# Tilt debugging  \ntilt doctor\ntilt logs --follow\n</code></pre>"},{"location":"REQUIREMENTS/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"REQUIREMENTS/#official-documentation","title":"Official Documentation","text":"<ul> <li>Colima GitHub: Official Colima documentation</li> <li>Tilt Documentation: Complete Tilt development guide</li> <li>kubectl Reference: Kubernetes command reference</li> </ul>"},{"location":"REQUIREMENTS/#amateur-radio-resources","title":"Amateur Radio Resources","text":"<ul> <li>AllStarLink Wiki: AllStarLink documentation</li> <li>USRP Protocol Spec: Official USRP protocol documentation</li> </ul>"},{"location":"REQUIREMENTS/#development-resources","title":"Development Resources","text":"<ul> <li>Go Documentation: Official Go language documentation  </li> <li>Docker Best Practices: Container development guidelines</li> </ul>"},{"location":"REQUIREMENTS/#platform-specific-quick-start","title":"\ud83c\udfaf Platform-Specific Quick Start","text":""},{"location":"REQUIREMENTS/#macos-with-colima-recommended","title":"macOS with Colima (Recommended)","text":"<pre><code># One-time setup\nbrew install colima docker kubectl tilt\ncolima start --cpu 4 --memory 8 --kubernetes\n\n# Daily development workflow\ncd usrp-go\njust dev               # Start development environment (Tilt)\njust tilt-dashboard    # Open Tilt UI\n# ... develop with live reload ...\njust tilt-down         # Stop when done\ncolima stop           # Stop Colima to save resources\n</code></pre>"},{"location":"REQUIREMENTS/#linux-with-docker-kind","title":"Linux with Docker + kind","text":"<pre><code># One-time setup  \n# [Install Docker, kubectl, kind, tilt as shown above]\nkind create cluster --name usrp-dev\n\n# Daily development workflow\ncd usrp-go\njust dev               # Start development environment  \njust tilt-dashboard    # Open Tilt UI\n# ... develop with live reload ...\njust tilt-down         # Stop when done\n</code></pre>"},{"location":"REQUIREMENTS/#windows-with-wsl2","title":"Windows with WSL2","text":"<pre><code># Run in WSL2 Ubuntu environment\n# Follow Linux setup instructions\n# Access from Windows browser: http://localhost:10350\n</code></pre> <p>\ud83c\udf89 With these requirements met, you'll have an excellent development experience for the USRP Audio Router Hub platform! The combination of Colima (on macOS) + Tilt provides a lightweight, fast, and professional development environment perfect for amateur radio software development.</p>"},{"location":"USRP_BRIDGE/","title":"USRP Bridge Utility","text":"<p>The USRP Bridge is a powerful utility that connects AllStarLink nodes with modern destination services through FFmpeg Opus conversion. It acts as a transparent bridge, converting amateur radio USRP packets to compressed audio formats for internet transmission.</p>"},{"location":"USRP_BRIDGE/#architecture","title":"Architecture","text":"<pre><code>AllStarLink Node &lt;--USRP--&gt; USRP Bridge &lt;--Opus/Ogg--&gt; Destination Service\n                             \u2502                          \u2502\n                             \u251c\u2500\u2500 WhoTalkie              \u2502\n                             \u251c\u2500\u2500 Discord Bot            \u2502\n                             \u2514\u2500\u2500 Custom Services        \u2502\n</code></pre> <p>The bridge receives USRP packets from AllStarLink nodes, converts the audio to Opus/Ogg format using FFmpeg, and forwards the compressed audio to configured destination services while maintaining full amateur radio protocol compliance.</p>"},{"location":"USRP_BRIDGE/#key-features","title":"Key Features","text":"<p>\u2705 Multi-Destination Support: Forward audio to multiple services simultaneously \u2705 FFmpeg Integration: High-quality Opus/Ogg audio conversion \u2705 AllStarLink Compatible: Full USRP protocol compliance \u2705 Configurable Routing: JSON-based configuration for complex setups \u2705 Real-time Monitoring: Built-in statistics and performance metrics \u2705 Amateur Radio Compliant: Proper callsign handling and PTT control \u2705 Production Ready: Robust error handling and graceful degradation  </p>"},{"location":"USRP_BRIDGE/#installation","title":"Installation","text":""},{"location":"USRP_BRIDGE/#requirements","title":"Requirements","text":"<ul> <li>Go 1.19+ for building the bridge</li> <li>FFmpeg with libopus for audio conversion</li> <li>AllStarLink node or USRP-compatible system</li> <li>Amateur radio license for legal operation</li> </ul>"},{"location":"USRP_BRIDGE/#building","title":"Building","text":"<pre><code># Build the USRP bridge binary\nmake build-usrp-bridge\n\n# Or build manually\ngo build -o bin/usrp-bridge cmd/usrp-bridge/main.go\n</code></pre>"},{"location":"USRP_BRIDGE/#ffmpeg-installation","title":"FFmpeg Installation","text":"<pre><code># macOS (Homebrew)\nbrew install ffmpeg\n\n# Ubuntu/Debian  \nsudo apt install ffmpeg libopus-dev\n\n# CentOS/RHEL\nsudo yum install ffmpeg opus-devel\n\n# Verify Opus support\nffmpeg -encoders | grep opus\n</code></pre>"},{"location":"USRP_BRIDGE/#quick-start","title":"Quick Start","text":""},{"location":"USRP_BRIDGE/#simple-usage-command-line","title":"Simple Usage (Command Line)","text":"<pre><code># Run with default settings (listen on :12345, forward to 127.0.0.1:8080)\n./bin/usrp-bridge\n\n# Specify custom ports and destination\n./bin/usrp-bridge -listen-port 12345 -dest-host 192.168.1.100 -dest-port 8080 -callsign W1AW\n\n# Enable verbose logging\n./bin/usrp-bridge -verbose -callsign KC1ABC\n</code></pre>"},{"location":"USRP_BRIDGE/#configuration-file-usage","title":"Configuration File Usage","text":"<pre><code># Generate sample configuration\nmake run-usrp-bridge-config\n# or: ./bin/usrp-bridge -generate-config\n\n# Edit the generated usrp-bridge.json file\nvim usrp-bridge.json\n\n# Run with configuration file\n./bin/usrp-bridge -config usrp-bridge.json\n</code></pre>"},{"location":"USRP_BRIDGE/#configuration","title":"Configuration","text":""},{"location":"USRP_BRIDGE/#configuration-file-format","title":"Configuration File Format","text":"<pre><code>{\n  \"usrp_listen_port\": 12345,\n  \"usrp_listen_addr\": \"0.0.0.0\",\n  \"allstar_host\": \"127.0.0.1\",\n  \"allstar_port\": 12346,\n  \"destinations\": [\n    {\n      \"name\": \"whotalkie\",\n      \"type\": \"whotalkie\",\n      \"host\": \"127.0.0.1\",\n      \"port\": 8080,\n      \"protocol\": \"udp\",\n      \"format\": \"opus\",\n      \"enabled\": true\n    },\n    {\n      \"name\": \"discord-bot\",\n      \"type\": \"discord\",\n      \"host\": \"127.0.0.1\", \n      \"port\": 8081,\n      \"protocol\": \"udp\",\n      \"format\": \"opus\",\n      \"enabled\": false,\n      \"settings\": {\n        \"guild_id\": \"your_guild_id\",\n        \"channel_id\": \"your_channel_id\"\n      }\n    }\n  ],\n  \"audio_config\": {\n    \"enable_conversion\": true,\n    \"output_format\": \"opus\",\n    \"bitrate\": 64,\n    \"sample_rate\": 8000,\n    \"channels\": 1\n  },\n  \"log_level\": \"info\",\n  \"metrics_port\": 9090,\n  \"station_call\": \"N0CALL\",\n  \"talk_group\": 0\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"USRP_BRIDGE/#network-settings","title":"Network Settings","text":"<ul> <li><code>usrp_listen_port</code>: Port to listen for USRP packets (default: 12345)</li> <li><code>usrp_listen_addr</code>: Listen address (default: \"0.0.0.0\")</li> <li><code>allstar_host</code>: AllStarLink return address (default: \"127.0.0.1\")</li> <li><code>allstar_port</code>: AllStarLink return port (default: 12346)</li> </ul>"},{"location":"USRP_BRIDGE/#destination-services","title":"Destination Services","text":"<ul> <li><code>name</code>: Unique identifier for the destination</li> <li><code>type</code>: Service type (\"whotalkie\", \"discord\", \"generic\")</li> <li><code>host</code>: Destination host address</li> <li><code>port</code>: Destination port number</li> <li><code>protocol</code>: Transport protocol (\"udp\", \"tcp\", \"websocket\")</li> <li><code>format</code>: Audio format (\"opus\", \"ogg\", \"raw\")</li> <li><code>enabled</code>: Enable/disable this destination</li> <li><code>settings</code>: Service-specific configuration parameters</li> </ul>"},{"location":"USRP_BRIDGE/#audio-processing","title":"Audio Processing","text":"<ul> <li><code>enable_conversion</code>: Enable FFmpeg audio conversion</li> <li><code>output_format</code>: Target audio format (\"opus\", \"ogg\")</li> <li><code>bitrate</code>: Audio bitrate in kbps (default: 64)</li> <li><code>sample_rate</code>: Output sample rate in Hz (default: 8000)</li> <li><code>channels</code>: Number of audio channels (default: 1)</li> </ul>"},{"location":"USRP_BRIDGE/#amateur-radio-settings","title":"Amateur Radio Settings","text":"<ul> <li><code>station_call</code>: Your amateur radio callsign</li> <li><code>talk_group</code>: USRP talk group ID (default: 0)</li> </ul>"},{"location":"USRP_BRIDGE/#usage-examples","title":"Usage Examples","text":""},{"location":"USRP_BRIDGE/#whotalkie-integration","title":"WhoTalkie Integration","text":"<p>Connect AllStarLink to WhoTalkie service:</p> <pre><code>{\n  \"usrp_listen_port\": 12345,\n  \"allstar_host\": \"your-allstar-node.local\",\n  \"allstar_port\": 2001,\n  \"destinations\": [\n    {\n      \"name\": \"whotalkie-main\",\n      \"type\": \"whotalkie\",\n      \"host\": \"whotalkie.example.com\",\n      \"port\": 8080,\n      \"protocol\": \"udp\", \n      \"format\": \"opus\",\n      \"enabled\": true,\n      \"settings\": {\n        \"room\": \"main-room\",\n        \"user\": \"AllStarLink-Bridge\"\n      }\n    }\n  ],\n  \"station_call\": \"W1AW\",\n  \"audio_config\": {\n    \"enable_conversion\": true,\n    \"output_format\": \"opus\",\n    \"bitrate\": 32\n  }\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#multi-destination-setup","title":"Multi-Destination Setup","text":"<p>Forward audio to multiple services:</p> <pre><code>{\n  \"destinations\": [\n    {\n      \"name\": \"whotalkie-primary\",\n      \"type\": \"whotalkie\",\n      \"host\": \"primary.whotalkie.com\",\n      \"port\": 8080,\n      \"enabled\": true\n    },\n    {\n      \"name\": \"whotalkie-backup\",\n      \"type\": \"whotalkie\", \n      \"host\": \"backup.whotalkie.com\",\n      \"port\": 8080,\n      \"enabled\": true\n    },\n    {\n      \"name\": \"discord-emergency\",\n      \"type\": \"discord\",\n      \"host\": \"127.0.0.1\",\n      \"port\": 8081,\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#high-quality-audio-setup","title":"High-Quality Audio Setup","text":"<p>For high-quality audio applications:</p> <pre><code>{\n  \"audio_config\": {\n    \"enable_conversion\": true,\n    \"output_format\": \"ogg\",\n    \"bitrate\": 128,\n    \"sample_rate\": 8000,\n    \"channels\": 1\n  }\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#allstarlink-integration","title":"AllStarLink Integration","text":""},{"location":"USRP_BRIDGE/#node-configuration","title":"Node Configuration","text":"<p>Configure your AllStarLink node to send USRP packets to the bridge:</p> <pre><code>; In your rpt.conf\n[node-number]\nduplex = 0\nrxchannel = usrp/127.0.0.1:12345,usrp\n\n; Enable USRP transmit\n[usrp]\n; Configuration for your USRP bridge\ncall = W1AW\ncontext = radio-bridge\n</code></pre>"},{"location":"USRP_BRIDGE/#network-setup","title":"Network Setup","text":"<pre><code># AllStarLink node sends to bridge\n# Configure your node to send USRP packets to bridge IP:12345\n\n# Bridge receives USRP packets and converts to Opus\n# Bridge forwards Opus to destination services\n\n# Example network flow:\n# AllStarLink Node (192.168.1.100:2001) -&gt; Bridge (192.168.1.200:12345) -&gt; WhoTalkie (whotalkie.com:8080)\n</code></pre>"},{"location":"USRP_BRIDGE/#monitoring-and-statistics","title":"Monitoring and Statistics","text":""},{"location":"USRP_BRIDGE/#real-time-statistics","title":"Real-time Statistics","text":"<pre><code># Send SIGUSR1 to display statistics\nkill -USR1 $(pgrep usrp-bridge)\n\n# Or if running in foreground, press Ctrl+\\ on some systems\n</code></pre>"},{"location":"USRP_BRIDGE/#statistics-output","title":"Statistics Output","text":"<pre><code>\ud83d\udcca Bridge Statistics\n==================\nUSRP Packets: 1234 received, 1230 sent\nOpus Packets: 890 generated, 888 forwarded\nErrors: 2 conversion, 1 network\nTraffic: 445632 bytes received, 89126 bytes sent\nLast Activity: 2025-01-15T10:30:45Z\n</code></pre>"},{"location":"USRP_BRIDGE/#performance-monitoring","title":"Performance Monitoring","text":"<p>The bridge provides metrics on port 9090 (configurable):</p> <pre><code># Check bridge health\ncurl http://localhost:9090/stats\n\n# Monitor with tools like Prometheus/Grafana\n</code></pre>"},{"location":"USRP_BRIDGE/#service-integration","title":"Service Integration","text":""},{"location":"USRP_BRIDGE/#whotalkie-protocol","title":"WhoTalkie Protocol","text":"<p>The bridge formats audio data for WhoTalkie compatibility:</p> <ul> <li>Opus audio at configured bitrate</li> <li>UDP transport protocol</li> <li>Metadata preservation for PTT state and callsign</li> </ul>"},{"location":"USRP_BRIDGE/#discord-integration","title":"Discord Integration","text":"<p>For Discord bot integration:</p> <pre><code>{\n  \"name\": \"discord-bot\",\n  \"type\": \"discord\",\n  \"settings\": {\n    \"guild_id\": \"123456789012345678\",\n    \"channel_id\": \"987654321098765432\",\n    \"bot_token\": \"stored_separately\"\n  }\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#generic-services","title":"Generic Services","text":"<p>For custom services:</p> <pre><code>{\n  \"name\": \"custom-service\",\n  \"type\": \"generic\",\n  \"protocol\": \"udp\",\n  \"format\": \"opus\",\n  \"settings\": {\n    \"custom_header\": true,\n    \"packet_size\": 1024\n  }\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"USRP_BRIDGE/#common-issues","title":"Common Issues","text":"<p>\"Failed to create audio converter\"</p> <pre><code># Check FFmpeg installation\nffmpeg -version\nffmpeg -encoders | grep opus\n\n# Install FFmpeg with Opus support\nbrew install ffmpeg  # macOS\nsudo apt install ffmpeg libopus-dev  # Ubuntu\n</code></pre> <p>\"Failed to listen on USRP port\"</p> <pre><code># Check if port is already in use\nsudo netstat -ulnp | grep :12345\n\n# Check permissions for low ports (&lt;1024)\nsudo ./usrp-bridge -listen-port 1234\n</code></pre> <p>\"Failed to connect to destination\"</p> <pre><code># Test network connectivity\nnc -u destination-host 8080\n\n# Check firewall settings\n# Ensure destination service is running and accessible\n</code></pre>"},{"location":"USRP_BRIDGE/#performance-issues","title":"Performance Issues","text":"<p>High CPU Usage - Reduce audio bitrate (64 -&gt; 32 kbps) - Disable unnecessary destinations - Check FFmpeg processes with <code>ps aux | grep ffmpeg</code></p> <p>High Latency - Minimize network hops to destination services - Use faster network connections - Consider local destination services</p> <p>Packet Loss - Check network quality with <code>ping</code> and <code>traceroute</code> - Increase buffer sizes if available - Monitor with <code>iftop</code> or similar tools</p>"},{"location":"USRP_BRIDGE/#security-considerations","title":"Security Considerations","text":""},{"location":"USRP_BRIDGE/#network-security","title":"Network Security","text":"<ul> <li>Firewall Configuration: Only allow necessary ports</li> <li>Access Control: Limit source IPs for USRP packets</li> <li>Encryption: Use VPN for internet transmission when possible</li> </ul>"},{"location":"USRP_BRIDGE/#amateur-radio-compliance","title":"Amateur Radio Compliance","text":"<ul> <li>Station Identification: Ensure proper callsign in configuration</li> <li>License Verification: Valid amateur radio license required</li> <li>Band Plan Compliance: Use only authorized frequencies</li> <li>Third Party Traffic: Follow local amateur radio regulations</li> </ul>"},{"location":"USRP_BRIDGE/#development-and-customization","title":"Development and Customization","text":""},{"location":"USRP_BRIDGE/#custom-destination-types","title":"Custom Destination Types","text":"<p>Add support for new services by modifying the <code>formatFor*</code> functions:</p> <pre><code>func (b *Bridge) formatForCustomService(audioData []byte, voiceMsg *usrp.VoiceMessage) []byte {\n    // Custom formatting logic\n    return formattedData\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#extending-configuration","title":"Extending Configuration","text":"<p>Add new configuration parameters:</p> <pre><code>type DestinationConfig struct {\n    // Existing fields...\n    CustomField string `json:\"custom_field,omitempty\"`\n}\n</code></pre>"},{"location":"USRP_BRIDGE/#plugin-architecture","title":"Plugin Architecture","text":"<p>The bridge can be extended with a plugin system for custom audio processing or destination protocols.</p>"},{"location":"USRP_BRIDGE/#production-deployment","title":"Production Deployment","text":""},{"location":"USRP_BRIDGE/#systemd-service","title":"Systemd Service","text":"<pre><code>[Unit]\nDescription=USRP Bridge Utility\nAfter=network.target\nWants=network.target\n\n[Service]\nType=simple\nExecStart=/usr/local/bin/usrp-bridge -config /etc/usrp-bridge/config.json\nRestart=always\nRestartSec=5\nUser=usrp-bridge\nGroup=usrp-bridge\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"USRP_BRIDGE/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM golang:1.19-alpine AS builder\nWORKDIR /app\nCOPY . .\nRUN go build -o usrp-bridge cmd/usrp-bridge/main.go\n\nFROM alpine:latest\nRUN apk add --no-cache ffmpeg\nCOPY --from=builder /app/usrp-bridge /usr/local/bin/\nEXPOSE 12345/udp\nCMD [\"usrp-bridge\", \"-config\", \"/etc/usrp-bridge/config.json\"]\n</code></pre>"},{"location":"USRP_BRIDGE/#high-availability","title":"High Availability","text":"<p>For critical applications:</p> <ul> <li>Run multiple bridge instances with different destination priorities</li> <li>Use load balancers for incoming USRP traffic</li> <li>Implement health checks and automatic failover</li> <li>Monitor with tools like Nagios or Zabbix</li> </ul>"},{"location":"USRP_BRIDGE/#legal-and-regulatory","title":"Legal and Regulatory","text":""},{"location":"USRP_BRIDGE/#amateur-radio-compliance_1","title":"Amateur Radio Compliance","text":"<p>\u26a0\ufe0f Important Legal Requirements</p> <ul> <li>Valid License: Amateur radio license required for USRP operation</li> <li>Proper Identification: Station callsign must be configured correctly</li> <li>Band Plan Compliance: Use only authorized amateur frequencies</li> <li>Third Party Traffic: Follow regulations for internet-linked communications</li> <li>Power Limits: Ensure compliance with power restrictions</li> <li>Spurious Emissions: Use proper filtering and clean signals</li> </ul>"},{"location":"USRP_BRIDGE/#international-considerations","title":"International Considerations","text":"<ul> <li>Different countries have varying amateur radio regulations</li> <li>Internet linking may have specific requirements</li> <li>Check with local amateur radio authorities</li> <li>Some regions restrict third-party traffic or encryption</li> </ul>"},{"location":"USRP_BRIDGE/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please:</p> <ol> <li>Maintain amateur radio compliance in all changes</li> <li>Test with real AllStarLink systems when possible</li> <li>Follow Go best practices and include tests</li> <li>Document any configuration changes</li> <li>Consider backward compatibility</li> </ol>"},{"location":"USRP_BRIDGE/#license","title":"License","text":"<p>MIT License - See LICENSE file for details.</p> <p>This software is provided for amateur radio experimentation under Part 97 regulations and similar international amateur radio regulations.</p> <p>73, Good DX! \ud83d\udcfb\ud83c\udf10</p> <p>\"Bridging amateur radio to the modern internet while preserving the spirit of experimentation\"</p>"},{"location":"USRP_BRIDGE/#references","title":"References","text":"<ul> <li>AllStarLink Documentation</li> <li>WhoTalkie Project</li> <li>FFmpeg Documentation</li> <li>USRP Protocol Specification</li> </ul>"},{"location":"audio-router/","title":"Audio Router","text":""},{"location":"audio-router/#audio-router","title":"Audio Router","text":"<p>The audio-router is a small service in this repository responsible for routing and converting audio streams used by the integration tests and local development environment.</p> <p>Summary - Purpose: accept audio input from various sources (UDP, files, or mocked services), convert or transcode as needed, and forward to downstream services (e.g. Allstar mock, USRP adapters). - Location: implementation and tests live under <code>test/containers</code> and <code>pkg/usrp</code>.</p> <p>Running locally - The integration stack in <code>test/integration/docker-compose.yml</code> includes the audio-router service. - To run the integration stack locally (requires Docker with Compose plugin or the repo shim), use the repo tasks:</p> <ul> <li><code>just test-integration</code> \u2014 runs the integration tasks and validator.</li> </ul> <p>Configuration - Build context: the <code>audio-router</code> service uses a build context located at the repository root so source files are available to the Docker build; see <code>test/integration/docker-compose.yml</code> for details. - Ports: the router listens on configured UDP ports (see <code>test/containers/*</code> mocks and <code>test/tilt</code> k8s manifests for examples).</p> <p>Development notes - Tests: the <code>test/containers/test-validator</code> script runs end-to-end checks that the audio-router and other services interoperate. - Logging: run the router locally or inside the integration stack and use <code>docker logs</code> to inspect runtime behavior.</p> <p>Troubleshooting - If Compose build fails with \"lstat ... no such file or directory\", verify build contexts in <code>test/integration/docker-compose.yml</code> point to the repository root. - If a container fails to start due to a mount type mismatch for <code>prometheus.yml</code> or similar, ensure the file exists in <code>test/integration/configs/</code> and is a regular file, not a directory.</p> <p>References - test/integration/docker-compose.yml - test/containers/test-validator/run-integration-tests.sh - test/containers/audio-router (implementation and Dockerfile)</p> <p>If you'd like, I can expand this page with architecture diagrams, example UDP packets, or a quickstart showing how to run the router and stream audio into it locally.</p> <p>Architecture (ASCII diagram)</p> <p>The audio-router sits between audio sources (mocks, UDP producers, file playback) and downstream consumers (Allstar mock, USRP adapters, test validator).</p> <pre><code>   +------------+       UDP/TCP/File       +--------------+      RPC/UDP     +------------+\n   | Audio Src  | ------------------------&gt; | Audio Router | ---------------&gt; | Allstar    |\n   | (mock/udp) |                          | (converter)  |                  | mock/USRP  |\n   +------------+                          +--------------+                  +------------+\n\n   - The router may spawn or configure codec/FFmpeg pipelines to transcode samples.\n   - Test validator interacts with the router to verify end-to-end audio flows.\n</code></pre> <p>Diagram</p> <p></p> <p>Configuration examples</p> <p>1) docker-compose service (excerpt)</p> <pre><code>services:\n  audio-router:\n    build:\n      context: ../..   # repo root\n      dockerfile: test/containers/audio-router/Dockerfile\n    image: usrp/audio-router:dev\n    environment:\n      - AUDIO_PORT=4010\n      - LOG_LEVEL=debug\n    networks:\n      - test-net\n    ports:\n      - \"4010:4010/udp\"\n</code></pre> <p>2) Example environment variables</p> <ul> <li>AUDIO_PORT \u2014 UDP port to listen for incoming audio frames (default: 4010)</li> <li>SAMPLE_RATE \u2014 expected sample rate for mixer/codec (e.g. 8000 or 16000)</li> <li>LOG_LEVEL \u2014 logging verbosity (debug/info/warn/error)</li> </ul> <p>Quick runbook snippets</p> <p>Start the integration stack (uses repo shim or docker compose plugin):</p> <pre><code># from repo root\n./scripts/docker_compose.sh -f test/integration/docker-compose.yml up --build -d\n./scripts/docker_compose.sh -f test/integration/docker-compose.yml logs -f audio-router\n</code></pre> <p>Stream a short test tone (local, using <code>socat</code> or <code>ffmpeg</code>):</p> <pre><code># send a generated sine wave as raw u-law or PCM as appropriate to UDP port\n# using ffmpeg to generate 1s of sine and send to UDP\nffmpeg -f lavfi -i \"sine=frequency=1000:duration=1\" -f mulaw udp://127.0.0.1:4010\n</code></pre> <p>Check router health and logs</p> <pre><code>docker ps --filter name=audio-router\ndocker logs &lt;audio-router-container-name&gt; --tail 200\n</code></pre> <p>Common issues and remedies</p> <ul> <li>Build context lstat errors: ensure <code>test/integration/docker-compose.yml</code> uses <code>context: ../..</code> when the Dockerfile references repo files.</li> <li>Socket / port collisions: if port 4010 is already used locally, change <code>AUDIO_PORT</code> or stop the conflicting process.</li> <li>Codec mismatch: confirm <code>SAMPLE_RATE</code> and sample format match the downstream consumer expectations (Allstar mock usually expects 8kHz mu-law/RTP-like frames).</li> </ul> <p>Extending this doc</p> <ul> <li>I can add example payload captures (pcap) or a small script to generate compatible UDP frames for automated testing.</li> <li>If you want image diagrams, I can add a rendered PNG to <code>docs/assets/</code> and reference it, but ASCII keeps the repo simple.</li> </ul>"}]}