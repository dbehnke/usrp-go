name: CI - Integration & Dagger

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]

jobs:
  integration:
    name: Integration (Docker-in-Docker)
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24-dind
        options: >-
          --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Docker client
        run: |
          echo "DOCKER_HOST=tcp://localhost:2375" >> $GITHUB_ENV

      - name: Install prerequisites and Docker Engine (official upstream packages)
        run: |
          set -eux
          sudo apt-get update -y
          sudo apt-get install -y ca-certificates curl gnupg lsb-release git make build-essential

          # Add Docker's official GPG key and repository (following Docker upstream instructions)
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update -y
          # Install Docker Engine, CLI, containerd and the Compose plugin from Docker repo
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

          # Verify docker and compose are available
          docker --version
          docker compose version

          # Install just using official installer if not present
          if ! command -v just >/dev/null 2>&1; then
            echo "Installing just via official install.sh"
            curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | sudo bash -s -- --to /usr/local/bin
          fi
          # Verify just installation
          if command -v just >/dev/null 2>&1; then
            just --version
          else
            echo "just not installed";
            exit 1;
          fi

      - name: Run integration tests (under bash)
        env:
          CI: "true"
        run: |
          # Run the project's integration test recipe inside bash so POSIX $?, pipes, and
          # other expectations behave correctly.
          env bash -lc 'set -o pipefail; just test-integration'
        timeout-minutes: 60

  dagger-run:
    name: Dagger Go pipeline
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/cli.sh | sh

      - name: Build and run Dagger pipeline
        env:
          CI: "true"
        run: |
          cd ci/dagger
          go build -o run .
          ./run
        timeout-minutes: 30
